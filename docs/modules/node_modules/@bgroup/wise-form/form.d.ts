/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'react';
import __beyond_dep_def_0 from 'react';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
// components\error.tsx
declare namespace ns_0 {
  import React = __beyond_dep_def_0;
  export function ErrorRenderer({
    error
  }: {
    error: any;
  }): React.JSX.Element;
}


// components\field\container.tsx
declare namespace ns_1 {
  import React = __beyond_dep_def_0;
  export function FieldContainer({
    children
  }: {
    children: any;
  }): React.JSX.Element;
}


// components\field\index.tsx
declare namespace ns_2 {
  import React = __beyond_dep_def_0;
  export function Control({
    field,
    index
  }: {
    field: any;
    index: any;
  }): React.JSX.Element;
}


// components\field\selection.tsx
declare namespace ns_3 {
  export function SelectionField(props: any): any;
}


// components\rows\row-container.tsx
declare namespace ns_4 {
  import React = __beyond_dep_def_0;
  import IWiseFormField = ns_12.IWiseFormField;
  export interface IFieldContainer {
    template: [number, string];
    items: IWiseFormField[];
    styles?: any;
  }
  export function FieldContainer({
    template: [totalFields, gridStyle],
    items,
    styles
  }: IFieldContainer): React.JSX.Element;
}


// components\rows\wrapper.tsx
declare namespace ns_5 {
  import React = __beyond_dep_def_0;
  export function FormSectionWrapper({
    data
  }: {
    data: any;
  }): React.JSX.Element;
}


// components\wrapped-form.tsx
declare namespace ns_6 {
  /// <reference types="react" />
  export function WrappedForm({
    children,
    settings,
    types,
    data
  }: {
    children: any;
    settings: any;
    types: any;
    data: any;
  }): JSX.Element;
}


// context.tsx
declare namespace ns_7 {
  import React = __beyond_dep_def_0;
  import FormModel = ns_17.FormModel;
  export interface IFormContext {
    model?: FormModel;
    name?: string;
    values?: Record<string, any>;
    template?: {
      type: string;
      items: any[];
    };
    formTypes?: Record<string, React.ElementType>;
  }
  export const WiseFormContext: React.Context<IFormContext>;
  export const useWiseFormContext: () => IFormContext;
}


// hooks\use-model.ts
declare namespace ns_8 {
  import FormModel = ns_17.FormModel;
  export function useModel(settings: any, form?: FormModel): any[];
}


// hooks\use-template.tsx
declare namespace ns_9 {
  /**
   * Applies a template to create a structured layout, optionally using a gap between elements.
   *
   * @param template - The template to be applied. Can be an array or an object conforming to the IFormTemplate interface.
   * @param gap - Specifies the gap between elements.
   * The `gap` parameter is deprecated and will be removed in a future version. Use the gap property within the template object instead.
   * @returns An object representing the structured layout with type, styles, and items.
   */
  export function useTemplate(settings: any, gap?: any): {
    type: string;
    styles: {};
    items: any;
  };
}


// hooks\use-types.ts
declare namespace ns_10 {
  export function useTypes(types: any): any;
}


// index.tsx
declare namespace ns_11 {
  /// <reference types="react" />
  import IWiseFormSpecs = ns_15.IWiseFormSpecs;
  export function WiseForm({
    children,
    settings,
    types,
    model
  }: IWiseFormSpecs): JSX.Element;
}


// interfaces\interfaces.ts
declare namespace ns_12 {
  export interface IWiseFormField {
    name: string;
    type: string;
    [key: string]: any;
  }
  export interface IWiseForm {
    name: string;
    template: string;
    fields: IWiseFormField[];
  }
}


// interfaces\settings.ts
declare namespace ns_13 {
  import IWiseFormField = ns_12.IWiseFormField;
  import IFormTemplate = ns_14.IFormTemplate;
  export interface IFormSettings {
    name: 'string';
    template?: IFormTemplate;
    values?: Record<string, string>;
    fields: IWiseFormField[];
    gap?: number;
  }
}


// interfaces\template.ts
declare namespace ns_14 {
  import CSSProperties = __beyond_dep_ns_0.CSSProperties;
  export interface IFormTemplate extends CSSProperties {
    structure?: string | (string | number | (string | number)[])[];
    gap?: string;
  }
}


// interfaces\wise-form-specs.ts
declare namespace ns_15 {
  /// <reference types="react" />
  import FormModel = ns_17.FormModel;
  import IFormSettings = ns_13.IFormSettings;
  export interface IWiseFormSpecs {
    children?: React.ReactNode;
    settings: IFormSettings;
    model?: FormModel;
    types?: Record<string, React.ReactNode>;
  }
}


// model\field.ts
declare namespace ns_16 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  export interface IFormField {
    name: string;
    type: string;
    placeholder: string;
    required: boolean;
    label: string;
    variant: string;
    disabled: boolean;
  }
  export class FormField extends ReactiveModel<IFormField> {
    #private;
    constructor(parent: any, properties?: {});
  }
}


// model\model.ts
declare namespace ns_17 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  import FormField = ns_16.FormField;
  export class FormModel extends ReactiveModel<FormModel> {
    #private;
    get settings(): any;
    get originalValues(): Record<string, string>;
    get values(): {};
    get fields(): Map<string, FormField>;
    constructor(settings: any, reactiveProps: any);
    setField(name: string, value: any): void;
  }
}


export import WrappedForm = ns_6.WrappedForm;
export import useWiseFormContext = ns_7.useWiseFormContext;
export import WiseForm = ns_11.WiseForm;
export import IWiseFormField = ns_12.IWiseFormField;
export import IWiseForm = ns_12.IWiseForm;
export import IFormSettings = ns_13.IFormSettings;
export import IFormTemplate = ns_14.IFormTemplate;
export import IWiseFormSpecs = ns_15.IWiseFormSpecs;
export import FormModel = ns_17.FormModel;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };